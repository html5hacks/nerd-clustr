{"ts":1361339356093,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n* helper functions\n**/\nfunction showRow(row_id){\n    if (document.getElementById(row_id)) {\n\t\tdocument.getElementById(row_id).style.display = ''; \n\t}\n}\n\nfunction hideRow(row_id){\n\tif (document.getElementById(row_id)) {\n\t\tdocument.getElementById(row_id).style.display = 'none';\n\t}\n}\n\nfunction toggleRow(row_id){\n\tif (document.getElementById(row_id)) {\n\t\tif (document.getElementById(row_id).style.display == 'none') {\n\t\t\tshowRow(row_id)\n\t\t} else {\n\t\t\thideRow(row_id)\n\t\t}\n\t}\n}\n\nfunction format3rdPartyModel(modeldata){\n    \n\n      var initData = JSON.parse(modeldata);\n      //var initData = modeldata;\n     \n          if (initData.isActive === 'yes') {\n              var twitterData = {},\n              githubData={};\n              if(typeof initData.twitter == \"undefined\") {\n                   twitterData = {\"_id\": initData._id, \"provider\": \"twitter\", \"isSet\": \"no\", \"username\": \"\",\"org_profile\": \"[not set]\"};\n              }\n              else {\n                   twitterData = {\"_id\": initData._id, \"provider\": \"twitter\", \"isSet\": \"yes\", \"username\": initData.twitter.screen_name,\"org_profile\": \"[not set]\"};\n                   var twProfileKeys = \"\";\n                   for(var key in initData.twitter){\n                        twProfileKeys = twProfileKeys + \"<span class=\\\"label\\\">\" + key + \"</span>\";\n                        twProfileKeys = twProfileKeys + \"<pre>\" + initData.twitter[key] + \"</pre>\";\n                   }\n                   twitterData.org_profile = twProfileKeys;\n              }\n              if(typeof initData.github == \"undefined\") {\n                   githubData = {\"_id\": initData._id, \"provider\": \"github\", \"isSet\": \"no\", \"username\": \"\",\"org_profile\": \"[not set]\"};\n              }\n              else {\n                   githubData = {\"_id\": initData._id, \"provider\": \"github\", \"isSet\": \"yes\", \"username\": initData.github.login,\"org_profile\": \"[not set]\"};\n                   var ghProfileKeys = \"\";\n                   for(var key2 in initData.github){\n                        ghProfileKeys = ghProfileKeys + \"<span class=\\\"label\\\">\" + key2 + \"</span>\";\n                        ghProfileKeys = ghProfileKeys + \"<pre>\" + initData.github[key2] + \"</pre>\";\n                   }\n                   githubData.org_profile = ghProfileKeys;\n              } \n              return  {\"data\":[githubData, twitterData]};                      \n          }//isActive\n}//function\n\n/**\n * SETUP\n **/\n  var app = app || {};\n\n\n\n/**\n * MODELS\n **/\n  \n  app.AccountData = Backbone.Model.extend({\n    url: '/account/',\n    defaults: {\n      success: false,\n      errors: [],\n      errfor: {},\n      username: '',\n      email: '',\n      password: '',\n      confirm: '',\n      isActive: '',\n      twitter: {},\n      github: {},\n      dataUpdated: false,\n      isAuthenticated: false\n    },\n    initialize: function(data) {\n      this.set(data);\n    },\n    accountdata: function() {\n      this.save(undefined, {\n        success: function(model, response, options) {\n          if (response.success) {\n            model.set({\n              errors: [],\n              errfor: {},\n              dataUpdated: true,\n              isActive: 'yes',\n              isAuthenticated: true\n            });\n          }\n          else {\n            model.set({\n              errors: response.errors,\n              errfor: response.errfor\n            });\n          }\n        },\n        error: function(model, xhr, options) {\n          var response = JSON.parse(xhr.responseText);\n          model.set({\n            errors: response.errors,\n            errfor: response.errfor\n          });\n        }\n      });\n    }\n  });\n\n  app.Identity = Backbone.Model.extend({\n    idAttribute: \"_id\",\n    defaults: {\n      success: false,\n      errors: [],\n      errfor: {},\n      isActive: '',\n      username: '',\n      email: ''\n    },\n    url: function() {\n      return '/account/identity/';\n    },\n    initialize: function(data) {\n      this.set(data);\n    },\n    update: function() {\n      this.save(undefined, {\n        success: function(model, response, options) {\n          if (response.success) {\n            model.set({\n              errors: [],\n              errfor: {}\n            });\n          }\n          else {\n            model.set({\n              errors: response.errors,\n              errfor: response.errfor\n            });\n          }\n        },\n        error: function(model, xhr, options) {\n          var response = JSON.parse(xhr.responseText);\n          model.set({\n            errors: response.errors,\n            errfor: response.errfor\n          });\n        }\n      });\n    }//update\n  });\n\n  app.Password = Backbone.Model.extend({\n    idAttribute: \"_id\",\n    defaults: {\n      success: false,\n      errors: [],\n      errfor: {},\n      newPassword: '',\n      confirm: ''\n    },\n    url: function() {\n      return '/account/password/';\n    },\n    initialize: function(data) {\n      this.set(data);\n    },\n    password: function() {\n      this.save(null, {});\n    }\n  });\n\n\n  app.ThirdParty = Backbone.Model.extend({\n    urlRoot: '/account/3rdparty/',\n    defaults: {\n      success: false,\n      errors: [],\n      errfor: {},\n      _id: null,\n      username: '',\n      provider: '',\n      isSet: 'no',\n      org_profile: ''\n    },\n    providerUnlink: function(provider,id) {\n      this.url = this.urlRoot +'remove/'+ provider +'/'+ id +'/';\n      this.save(undefined, {\n        success: function(model, response, options) {\n          //this.url = this.urlRoot;\n          if (response.success) {\n                var newData = format3rdPartyModel(response.user);\n                app.thirdpartyView.collection.reset(newData.data);\n                //console.log(\"New Data: \" + JSON.stringify(newData.data));\n          }\n\n        }\n      });\n      this.url = this.urlRoot;\n    },\n    \n      providerLink: function(provider,id) {\n          if(provider === 'twitter'){\n            location.href = '/auth/twitter';    \n          }\n          else if(provider === 'github'){\n            location.href = '/auth/github';    \n          }\n          else {\n              //unrecognized provider\n          }\n    }\n    \n    \n  });\n  \n  app.ThirdPartyCollection = Backbone.Collection.extend({\n    model: app.ThirdParty,\n    url: '/account/3rdparty/',\n    \n    parse: function(services) {  \n      return services.data;\n    }\n  });\n  \n\n/**\n * VIEWS\n **/\n  app.AccountDataView = Backbone.View.extend({\n    el: '#accountdata',\n    template: _.template( $('#tmpl-accountdata').html() ),\n    events: {\n      'submit form': 'preventSubmit',\n      'keypress [name=\"confirm\"]': 'accountOnEnter',\n      'click .btn-accountdata': 'accountdata'\n    },\n    initialize: function() {\n      this.model.on('change', this.render, this);\n      this.render();\n    },\n\n    render: function() {\n      var modelData = this.model.toJSON();\n      \n      //render\n      this.$el.html(this.template( modelData ));\n      \n      //set input values\n      for(var key in modelData) {\n        this.$el.find('[name=\"'+ key +'\"]').val(modelData[key]);\n      }\n    },\n    \n    preventSubmit: function(event) {\n      event.preventDefault();\n    },\n    accountOnEnter: function(event) {\n      if (event.keyCode != 13) return;\n      if ($(event.target).attr('name') != 'confirm') return;\n      this.accountdata(event);\n    },\n    accountdata: function(event) {\n      if (event) event.preventDefault();\n      this.model.set({\n        username: this.$el.find('[name=\"username\"]').val(),\n        email: this.$el.find('[name=\"email\"]').val(),\n        password: this.$el.find('[name=\"password\"]').val(),\n        confirm: this.$el.find('[name=\"confirm\"]').val(),\n      });\n      this.$el.find('.btn-accountdata').attr('disabled', true);\n      this.model.accountdata();\n    }\n  });\n\n\n  app.PasswordView = Backbone.View.extend({\n    el: '#password',\n    template: _.template( $('#tmpl-password').html() ),\n    events: {\n      'click .btn-password': 'password'\n    },\n    password: function() {\n      this.model.set({\n        newPassword: this.$el.find('[name=\"newPassword\"]').val(),\n        confirm: this.$el.find('[name=\"confirm\"]').val()\n      }, {silent: true});\n      \n      this.model.password();\n    },\n    initialize: function() {\n      this.model.on('change', this.render, this);\n      this.render();\n    },\n    render: function() {\n      var modelData = this.model.toJSON();\n      \n      //render\n      this.$el.html(this.template( modelData ));\n      \n      //set input values\n      for(var key in modelData) {\n        this.$el.find('[name=\"'+ key +'\"]').val(modelData[key]);\n      }\n    }\n  });\n\n\n  app.IdentityView = Backbone.View.extend({\n    el: '#identity',\n    template: _.template( $('#tmpl-identity').html() ),\n    events: {\n      'click .btn-update': 'update'\n    },\n      initialize: function() {\n          var initData = JSON.parse($('#data-record').html());\n              var twitterData = {},\n              githubData={};\n              if(typeof initData.twitter == \"undefined\") {\n                   twitterData = {\"screen_name\": \" \", \"data\": \"[not set]\"};\n              }\n              else {\n                   twitterData = {\"screen_name\": initData.twitter.screen_name, \"data\": \"[not set]\"};\n                   var twProfileKeys = \"\";\n                   for(var key in initData.twitter){\n                        twProfileKeys = twProfileKeys + \"<span class=\\\"label\\\">\" + key + \"</span>\"\n                        twProfileKeys = twProfileKeys + \"<pre>\" + initData.twitter[key] + \"</pre>\"\n                   }\n                   twitterData.data = twProfileKeys\n              }\n              if(typeof initData.github == \"undefined\") {\n                   githubData = {\"login\": \"[not set]\", \"data\": \"[not set]\"};\n              }\n              else {\n                   githubData = {\"login\": initData.github.login, \"data\": \"[not set]\"};\n                   var ghProfileKeys = \"\";\n                   for(var key2 in initData.github){\n                        ghProfileKeys = ghProfileKeys + \"<span class=\\\"label\\\">\" + key2 + \"</span>\"\n                        ghProfileKeys = ghProfileKeys + \"<pre>\" + initData.github[key2] + \"</pre>\"\n                   }\n                   githubData.data = ghProfileKeys\n              }          \n          \n          if (initData.isActive === 'yes') {\n              this.model = new app.Identity({\n                  _id: initData._id,\n                  isActive: initData.isActive,\n                  username: initData.username,\n                  email: initData.email\n              });\n              this.model.on('change', this.render, this);\n              \n              app.passwordView = new app.PasswordView({\n                  model: new app.Password({\n                      _id: initData._id\n                  })\n              });\n              \n          }//if\n          else {\n\n\n              this.model = new app.AccountData({\n                  _id: initData._id,\n                  username: initData.username,\n                  email: initData.email,\n                  password: '',\n                  confirm: '',\n                  isActive: initData.isActive,\n                  github: githubData,\n                  twitter: twitterData                  \n              });\n              app.accountdataView = new app.AccountDataView({\n                  model: this.model\n              });\n          }//else\n          this.render(); \n      },//initialize\n\n      update: function() {\n      this.model.set({\n        isActive: this.$el.find('[name=\"isActive\"]').val(),\n        username: this.$el.find('[name=\"username\"]').val(),\n        email: this.$el.find('[name=\"email\"]').val()\n      }, {silent: true});\n      \n      this.model.update();\n    },    \n    render: function() {\n      var modelData = this.model.toJSON();\n      \n      //render\n      this.$el.html(this.template( modelData ));\n      \n      //set input values\n      for(var key in modelData) {\n        this.$el.find('[name=\"'+ key +'\"]').val(modelData[key]);\n      }\n    }      \n  });\n\n\n  app.ThirdPartyView = Backbone.View.extend({\n    el: '#3rdparty-table',\n    template: _.template( $('#tmpl-3rdparty-table').html() ),\n    initialize: function() {\n      this.$el.html(this.template());\n      app.thirdpartyView = this;\n      var services = format3rdPartyModel($('#data-record').html());\n  \n      this.collection = new app.ThirdPartyCollection( services.data );\n      this.collection.on('reset', this.render, this);\n    \n     \n      this.render();\n    },\n    render: function() {\n      $('#3rdparty-rows').empty();\n      \n      this.collection.each(function(thirdparty) {\n        var view = new app.ThirdPartyRowView({ model: thirdparty });\n        $('#3rdparty-rows').append( view.render().$el );\n        \n        if(thirdparty.attributes.isSet ==\"yes\"){\n        var profile_row = \"<tr id=\\\"\" + thirdparty.attributes.provider + \"\\\" style=\\\"display: none;\\\"><td colspan = \\\"4\\\">\" + thirdparty.attributes.org_profile + \"</td></tr>\";\n        $('#3rdparty-rows').append( profile_row );\n        }\n      }, this);\n\n      \n    }\n\n  });\n  \n  app.ThirdPartyRowView = Backbone.View.extend({\n    tagName: 'tr',\n    template: _.template( $('#tmpl-3rdparty-row').html() ),\n    events: {\n      'click .btn-remove': 'doRemove',\n      'click .btn-add': 'doAdd',\n      'click #prof-link-github': 'toggleProfGH',\n      'click #prof-link-twitter': 'toggleProfTW'\n    },\n\n    doRemove: function() {\n        var provider = this.model.attributes.provider;\n        var id = this.model.attributes._id;\n        this.model.providerUnlink(provider,id);\n    },\n    doAdd: function() {      \n       var provider = this.model.attributes.provider;\n        var id = this.model.attributes._id;\n        this.model.providerLink(provider,id);\n    },\n    \n     toggleProfGH: function() {\n      //location.href = '/auth/github';\n      $(this.el.lastChild.childNodes[0]).text((this.el.lastChild.childNodes[0].text != \"Show Profile\" ? \"Show Profile\" : \"Hide Profile\"));\n      toggleRow('github');\n    },\n    toggleProfTW: function() {\n      //location.href = '/auth/twitter';\n      $(this.el.lastChild.childNodes[0]).text((this.el.lastChild.childNodes[0].text != \"Show Profile\" ? \"Show Profile\" : \"Hide Profile\"));\n        toggleRow('twitter');\n    },   \n    render: function() {\n      var str_row = this.template(this.model.toJSON());\n      str_row = str_row.replace(\"icon-github\",\"icon-\" + this.model.attributes.provider);\n      // we do know the template string so direct str replace should be fine \n      if(this.model.attributes.isSet ==\"no\"){\n        str_row = str_row.replace(\"Remove link\",\"Add link\");\n        str_row = str_row.replace(\"btn-remove\",\"btn-add\");\n        str_row = str_row.replace(\"btn-warning\",\"btn-success\");\n        str_row = str_row.replace(\"Show Profile\",\"\");\n      }\n      else {\n              str_row = str_row.replace(\"prof-link\",\"prof-link-\" + this.model.attributes.provider);\n              \n      }\n\n      this.$el.html( str_row );\n      return this;\n    }\n  });\n\n  app.MainView = Backbone.View.extend({\n    el: '.page .container',\n    initialize: function() {\n                    \n      app.identityView = new app.IdentityView();    \n      app.thirdpartyView = new app.ThirdPartyView();\n    }\n  });\n\n/**\n * ROUTER\n **/\n  app.Router = Backbone.Router.extend({\n    routes: {\n      '': 'default'\n    },\n    default: function() {\n      if (!app.mainView) app.mainView = new app.MainView();\n      \n      if (!app.isFirstLoad) {\n        app.thirdpartyView.collection.fetch();\n      }\n      \n      app.isFirstLoad = false;\n    }\n  });\n  \n\n/**\n * BOOTUP\n **/\n$(document).ready(function() {\n    app.isFirstLoad = true;\n    app.router = new app.Router();\n    Backbone.history.start();\n  });\n"]],"start1":0,"start2":0,"length1":0,"length2":15651}]],"length":15651}

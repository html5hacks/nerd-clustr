{"ts":1361333750151,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//dependencies\nvar express = require('express')\n  , mongoStore = require('connect-mongo')(express)\n  , http = require('http')\n  , path = require('path')\n  , passport = require('passport')\n  , mongoose = require('mongoose')\n  , socketIo = require('socket.io')\n  , passportSocketIo = require(\"passport.socketio\");\n\n//create express app\nvar app = express();\n\n//mongo uri\napp.set('mongodb-uri', 'mongodb://nodejitsu_jdcravens:okecgboe57biqe4jvkm6nl7pob@ds051947.mongolab.com:51947/nodejitsu_jdcravens_nodejitsudb1954665151' || process.env.MONGOHQ_URL || 'localhost/starter');\n\n//setup mongoose\napp.db = mongoose.createConnection(app.get('mongodb-uri'));\napp.db.on('error', console.error.bind(console, 'mongoose connection error: '));\napp.db.once('open', function () {\n  console.log('mongoose open for business');\n});\n\n//config data models\nrequire('./models')(app, mongoose);\n\n//config passport\nrequire('./passport')(app, passport);\n\n//config all\napp.configure(function(){\n  //settings\n  app.disable('x-powered-by');\n  app.set('port', process.env.PORT || 3000);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.set('strict routing', true);\n  app.set('project-name', \"2013 SXSW Nerd Herdr\");\n  app.set('company-name', 'frog');\n  app.set('admin-email', 'webdev.jdcravens@gmail.com');\n  app.set('email-from-name', app.get('project-name')+ ' Website');\n  app.set('email-from-address', 'webdev.jdcravens@gmail.com');\n  app.set('email-credentials', {\n    user: 'html5hacksbook@gmail.com',\n    password: 'html5432',\n    host: 'smtp.gmail.com',\n    ssl: true\n  });\n\n  mySessionStore = new mongoStore({ url: app.get('mongodb-uri') });\n  mySecret = 'Sup3rS3cr3tK3y';\n\n  //middleware\n  app.use(express.favicon(__dirname + '/public/favicon.ico'));\n  app.use(express.logger('dev'));\n  app.use(express.static(path.join(__dirname, 'public')));\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.cookieParser());\n  app.use(express.session({ \n    secret: mySecret,\n    store: mySessionStore\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(app.router);\n  \n  //locals\n  app.locals.projectName = app.get('project-name');\n  app.locals.copyrightYear = new Date().getFullYear();\n  app.locals.copyrightName = app.get('company-name');\n});\n\n//config dev\napp.configure('development', function(){\n  app.use(express.errorHandler());\n});\n\n//route requests\nrequire('./routes')(app);\n\n//utilities\nrequire('./utilities')(app);\n\n//listen up\n\nvar server = http.createServer(app).listen(app.get('port'), function(){\n  console.log(\"Express server listening on port \" + app.get('port'));\n});\n\nvar io = require('socket.io').listen(server);\n\nio.set('loglevel',10) // set log level to get all debug messages\n\nio.set(\"authorization\", passportSocketIo.authorize({\n  key: 'connect.sid', //the cookie where express (or connect) stores its session id.\n  secret: mySecret, //the session secret to parse the cookie\n  store:   mySessionStore, //the session store that express uses\n  fail: function(data, accept) { // *optional* callbacks on success or fail\n    console.log('fail');\n    accept(null, false); // second param takes boolean on whether or not to allow handshake\n  },\n  success: function(data, accept) {\n    console.log('success');\n    accept(null, true);\n  }\n}));\n\n// Clients is a list of users who have connected\nvar clients = [];\nvar count = 0;\n///////////////////////////////////////////////////////////////////// SEND() UTILITY\nfunction send(message) {   \n  clients.forEach(function(client) {\n      client.send(message);\n  });\n}\n\nio.on('connection',function(socket){\n\n  count++;\n  clients.push(socket);\n\n  io.sockets.emit('count', {\n      number: count\n  });\n\n  socket.on('send:coords', function (data) {\n    socket.broadcast.emit('load:coords', data);\n  });\n  \n  //socket.emit('init',{msg:\"test\"})\n  // socket.on('init', function (data) {\n\n  //   // io.sockets.emit('pin', {\n  //   //     lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\n  //   //     lng: data.Za, \n  //   //     username: socket.handshake.user.username\n  //   // });\n\n  //   send(JSON.stringify({\n  //       type: 'pin',\n  //       lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\n  //       lng: data.Za, \n  //       username: socket.handshake.user.username\n  //     })\n  //   );\n  // })\n\n  // console.log(\"user connected: \", socket.handshake.user.username);\n\n  //filter sockets by user...\n  // var userGender = socket.handshake.user.gender, \n  //     opposite = userGender === \"male\" ? \"female\" : \"male\";\n\n  // passportSocketIo.filterSocketsByUser(io, function (user) {\n  //   return user.gender === opposite;\n  // }).forEach(function(s){\n  //   s.send(\"a \" + userGender + \" has arrived!\");\n  // });\n\n  // io.sockets.emit('pin', {\n  //     lat: 30.2630, // center: new google.maps.LatLng(30.2630, 262.254),\n  //     lng: 262.254 \n  // });\n\n  socket.on('disconnect', function (client) {\n    var index = clients.indexOf(client);\n    clients.splice(index,1);\n    count--;\n    io.sockets.emit('count', {\n        number: count\n    });\n  });\n\n\n})\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5116}]],"length":5116}
{"contributors":[],"silentsave":false,"ts":1361333742360,"patch":[[{"diffs":[[-1,"//dependencies\nvar express = require('express')\n  , mongoStore = require('connect-mongo')(express)\n  , http = require('http')\n  , path = require('path')\n  , passport = require('passport')\n  , mongoose = require('mongoose')\n  , socketIo = require('socket.io')\n  , passportSocketIo = require(\"passport.socketio\");\n\n//create express app\nvar app = express();\n\n//mongo uri\napp.set('mongodb-uri', 'mongodb://nodejitsu_jdcravens:okecgboe57biqe4jvkm6nl7pob@ds051947.mongolab.com:51947/nodejitsu_jdcravens_nodejitsudb1954665151' || process.env.MONGOHQ_URL || 'localhost/starter');\n\n//setup mongoose\napp.db = mongoose.createConnection(app.get('mongodb-uri'));\napp.db.on('error', console.error.bind(console, 'mongoose connection error: '));\napp.db.once('open', func"],[1,"$(function() {\r\n \r\n  var map;\r\n  var info = $('#infobox');\r\n  var doc = $(document);\r\n \r\n  var tinyIcon = L.Icon.extend({\r\n    op"],[0,"tion"],[-1," ()"],[1,"s:"],[0," {"],[1,"\r"],[0,"\n  "],[-1,"console.log('mongoose open for business');\n});\n\n//config data models\nrequire('./models')(app, mongoose);\n\n//config passport\nrequire('./passport')(app, passport);\n\n//config all\napp.configure(function(){\n  //settings\n  app.disable('x-powered-by');\n  app.set('port', process.env.PORT || 3000);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.set('strict routing', true);\n  app.set('project-name', \"2013 SXSW Nerd Herdr\");\n  app.set('company-name', 'frog');\n  app.set('admin-email', 'webdev.jdcravens@gmail.com');\n  app.set('email-from-name', app.get('project-name')+ ' Website');\n  app.set('email-from-address', 'webdev.jdcravens@gmail.com');\n  app.set('email-credentials', {\n    user: 'html5hacksbook@gmail.com',\n    passw"],[1,"    shadowUrl: '../vendor/leaflet/assets/marker-shadow.png',\r\n      iconSize: [25, 39],\r\n      iconAnchor:   [12, 36],\r\n      shadowSize: [41, 41],\r\n      shadowAnchor: [12, 38],\r\n      popupAnch"],[0,"or"],[-1,"d"],[0,": "],[-1,"'html5432',\n    host: 'smtp.gmail.com',\n    ssl: true\n  });\n\n  mySessionStore = new mongoStore({ url: app.get('mongodb-uri') });\n  mySecret = 'Sup3rS3cr3tK3y';\n\n  //middleware\n  app.use(express.favicon(__dirname + '/public/favicon.ico'));\n  app.use(express.logger('dev'));\n  app.use(express.static(path.join(__dirname, 'public'))"],[1,"[0, -30]\r\n    }\r\n  });\r\n \r\n  var redIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-red.png' }"],[0,");"],[1,"\r"],[0,"\n "],[-1," app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.cookieParser());\n  app.use(express.session({ \n    secret: mySecret,\n    store: mySessionStore\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(app.router);\n  \n  //locals\n  app.locals.projectName = app.get('project-name');\n  app.locals.copyrightYear = new Date().getFullYear();\n  app.locals.copyrightName = app.get('company-name');\n});\n\n//config dev\napp.configure('development', function(){\n  app.use(express.errorHandler());\n});\n\n//route requests\nrequire('./routes')(app);\n\n//utilities\nrequire('./utilities')(app);\n\n//listen up\n\nvar server = http.createServer(app).listen(app.get('port'), function(){\n  console.log(\"Express server listening on port \" + app.get('port'));\n});\n\nvar io = require('socket.io').listen(server);\n\nio.set('loglevel',10) // set log level to get all debug messages\n\nio.set(\"authorization\", passportSocketIo.authorize({\n  key: 'connect.sid', //the cookie where express (or connect) stores"],[1,"\r\n  var sentData = {}\r\n  var connects = {};\r\n  console.log(connects)\r\n  var markers = {};\r\n  var active = false;\r\n \r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });\r\n  } else {\r\n    $('.map').text('Your browser"],[0," i"],[-1,"t"],[0,"s "],[-1,"session id.\n  secret: mySecret, //the session secret to parse the cookie\n  store:   mySessionStore, //the session store that express uses\n  fail: function(data, accept) { // *optional* callbacks on success or fail\n    console.log('fail"],[1,"out of fashion, there\\'s no geolocation!"],[0,"');"],[1,"\r"],[0,"\n  "],[-1,"  accept(null, false); // second param takes boolean on whether or not to allow handshake\n  },\n  success: function(data, accept) {"],[1,"}\r\n \r\n  function positionSuccess(position) {\r\n \r"],[0,"\n   "]],"start1":0,"start2":0,"length1":3268,"length2":860},{"diffs":[[0,"le.log('"],[-1,"s"],[1,"positionS"],[0,"uccess')"]],"start1":866,"start2":866,"length1":17,"length2":25},{"diffs":[[0,"s');"],[1,"\r"],[0,"\n "],[1,"\r\n"],[0,"   "],[-1,"accept(null, true);\n  }\n}));\n\n// Clients is a list of users who have connected\nvar clients = [];\nvar count = 0;\n///////////////////////////////////////////////////////////////////// SEND() UTILITY\nfunction send(message) {   \n  clients.forEach(function(client) {\n      client.send(message);\n  });\n}\n\nio.on('connection',function(socket){\n\n  count++;\n  clients.push(socket);\n\n  io.sockets.emit('count'"],[1," var lat = position.coords.latitude;\r\n    var lng = position.coords.longitude;\r\n    var acr = position.coords.accuracy;\r\n \r\n    // mark user's position\r\n    userMarker = L.marker([lat, lng]"],[0,", {"],[1,"\r"],[0,"\n      "],[-1,"number: count\n  });\n\n  socket.on('send:coords', function (data) {\n    socket.broadcast.emit('load:coords', data);\n"],[1,"icon: redIcon\r\n  "],[0,"  });"],[1,"\r"],[0,"\n "],[-1," \n  //socket.emit('init',{msg:\"test\"})\n  // socket.on('init', function (data) {\n\n  //   // io.sockets.emit('pin', {\n  //   //     lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\n  //   //     lng: data.Za, \n  //   //     username: socket.handshake.user.username\n  //   // });\n\n  //   send(JSON.stringify({\n  //       type: 'pin',"],[1,"\r\n    // uncomment for static debug\r\n    //userMarker = L.marker([30.2630, 262.254], { icon: redIcon });\r\n \r\n    // load leaflet map\r\n    map = L.map('map', {\r"],[0,"\n  "],[-1,"//"],[0,"    "],[-1,"   lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\n  //       lng: data.Za, "],[1,"center: [30.2630, 262.254],\r\n      zoom: 15,\r"],[0,"\n  "],[-1,"//"],[0,"    "],[-1,"   username: socket.handshake.user.username\n  //     })\n  //   );\n  // })\n\n  // console.log(\"user connected: \", socket.handshake.user.username);\n\n  //filter sockets by user...\n  // var userGender = socket.handshake.user.gender, \n  //     opposite = userGender === \"male\" ? \"female\" : \"male\";\n\n"],[1,"zoomControl: false,\r\n      attributionControl: false\r\n    });\r\n \r\n "],[0,"  "],[1," "],[0,"// "],[-1,"passportSocketIo.filterSocketsByUser(io, function (user) {\n  //   return user.gender === opposite;\n  // }).forEach(function(s){\n  //   s.send(\"a \" + userGender + \" has arrived!\");\n  // });\n\n  // io.sockets.emit('pin', {\n  //     lat: 30.2630, // center: new google.maps.LatLng(30.2630, 262.254),\n  //     lng: 262.254 \n  // });\n\n  socket.on('disconnect', function (client) {\n    var index = clients.indexOf(client);\n    clients.splice(index,1"],[1,"leaflet API key tiler\r\n    L.tileLayer('http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', { maxZoom: 18, detectRetina: true }).addTo(map"],[0,");"],[1,"\r"],[0,"\n    "],[-1,"count--;\n    io.sockets.emit('count', {\n        number: count\n    }"],[1,"\r\n    userMarker.addTo(map"],[0,");"],[1,"\r"],[0,"\n  }"],[-1,");\n\n\n})\n"],[1,"\r\n});\r"],[0,"\n"]],"start1":888,"start2":888,"length1":1828,"length2":751}]],"length":1639,"saved":false}
{"ts":1361333856039,"patch":[[{"diffs":[[-1,"$"],[0,"(functio"]],"start1":0,"start2":0,"length1":9,"length2":8}]],"length":1638,"saved":false}
{"ts":1361333965326,"patch":[[{"diffs":[[-1,"(function() {"],[0,"\r\n \r"]],"start1":0,"start2":0,"length1":17,"length2":4},{"diffs":[[0,";\r\n  }\r\n"],[-1,"});"],[0,"\r\n"]],"start1":1612,"start2":1612,"length1":13,"length2":10}]],"length":1622,"saved":false}
{"ts":1361334039353,"patch":[[{"diffs":[[0," {\r\n    "],[-1,"$"],[1,"document.getElementById"],[0,"('.map')"]],"start1":707,"start2":707,"length1":17,"length2":39}]],"length":1644,"saved":false}
{"ts":1361334110663,"patch":[[{"diffs":[[0," var map;\r\n "],[1,"//"],[0," var info = "]],"start1":6,"start2":6,"length1":24,"length2":26},{"diffs":[[0,"fobox');\r\n  "],[1,"//"],[0,"var doc = $("]],"start1":38,"start2":38,"length1":24,"length2":26}]],"length":1648,"saved":false}
{"ts":1361334410069,"patch":[[{"diffs":[[-1,"\r\n \r\n  var map;\r\n // var info = $('#infobox"],[1,"//dependencies\r\nvar express = require('express')\r\n  , mongoStore = require('connect-mongo')(express)\r\n  , http = require('http')\r\n  , path = require('path')\r\n  , passport = require('passport')\r\n  , mongoose = require('mongoose')\r\n  , socketIo = require('socket.io"],[0,"')"],[-1,";"],[0,"\r\n  "],[-1,"//var doc = $(document"],[1,", passportSocketIo = require(\"passport.socketio\""],[0,");\r\n"],[-1," "],[0,"\r\n"],[-1,"  var tinyIcon = L.Icon.extend({\r\n    options: {\r\n      shadowUrl: '../vendor/leaflet/assets/marker-shadow.png',\r\n      iconSize: [25, 39],\r\n      iconAnchor:   [12, 36],\r\n      shadowSize: [41, 41],\r\n      shadowAnch"],[1,"//create express app\r\nvar app = express();\r\n\r\n//mongo uri\r\napp.set('mongodb-uri', 'mongodb://nodejitsu_jdcravens:okecgboe57biqe4jvkm6nl7pob@ds051947.mongolab.com:51947/nodejitsu_jdcravens_nodejitsudb1954665151' || process.env.MONGOHQ_URL || 'localhost/starter');\r\n\r\n//setup mongoose\r\napp.db = mongoose.createConnection(app.get('mongodb-uri'));\r\napp.db.on('error', console.error.bind(console, 'mongoose connection error: '));\r\napp.db.once('open', function () {\r\n  console.log('mongoose open for business');\r\n});\r\n\r\n//config data models\r\nrequire('./models')(app, mongoose);\r\n\r\n//config passport\r\nrequire('./passport')(app, passport);\r\n\r\n//config all\r\napp.configure(function(){\r\n  //settings\r\n  app.disable('x-powered-by');\r\n  app.set('port', process.env.PORT || 3000);\r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'jade');\r\n  app.set('strict routing', true);\r\n  app.set('project-name', \"2013 SXSW Nerd Herdr\");\r\n  app.set('company-name', 'frog');\r\n  app.set('admin-email', 'webdev.jdcravens@gmail.com');\r\n  app.set('email-from-name', app.get('project-name')+ ' Website');\r\n  app.set('email-from-address', 'webdev.jdcravens@gmail.com');\r\n  app.set('email-credentials', {\r\n    user: 'html5hacksbook@gmail.com',\r\n    passw"],[0,"or"],[1,"d"],[0,": "],[-1,"[12, 38],\r\n      popupAnchor: [0, -30]\r\n    }"],[1,"'html5432',\r\n    host: 'smtp.gmail.com',\r\n    ssl: true"],[0,"\r\n  "]],"start1":0,"start2":0,"length1":349,"length2":1628},{"diffs":[[0,");\r\n"],[-1," "],[0,"\r\n  "],[-1,"var redIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-red.png' });\r\n \r\n  var sentData = {}\r\n  var connects = {};\r\n  console.log(connects)\r\n  var markers = {};\r\n  var active = false;\r\n \r\n  if (navigator.geoloca"],[1,"mySessionStore = new mongoStore({ url: app.get('mongodb-uri') });\r\n  mySecret = 'Sup3rS3cr3tK3y';\r\n\r\n  //middleware\r\n  app.use(express.favicon(__dirname + '/public/favicon.ico'));\r\n  app.use(express.logger('dev'));\r\n  app.use(express.static(path.join(__dirname, 'public')));\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(express.cookieParser());\r\n  app.use(express.session({ \r\n    secret: mySecret,\r\n    store: mySessionStore\r\n  }));\r\n  app.use(passport.initialize());\r\n  app.use(passport.session());\r\n  app.use(app.router);\r\n  \r\n  //locals\r\n  app.locals.projectName = app.get('project-name');\r\n  app.locals.copyrightYear = new Date().getFullYear();\r\n  app.locals.copyrightName = app.get('company-name');\r\n});\r\n\r\n//config dev\r\napp.configure('development', func"],[0,"tion"],[1,"("],[0,")"],[-1," "],[0,"{\r\n  "],[-1,"  navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });\r\n  } else {\r\n    document.getElementById('.map').text('Your browser is out of fashion, there\\'s no geolocation!');\r\n  }\r\n \r\n  function positionSuccess(position) {\r\n "],[1,"app.use(express.errorHandler());\r\n});\r\n\r\n//route requests\r\nrequire('./routes')(app);\r\n\r\n//utilities\r\nrequire('./utilities')(app);\r\n\r\n//listen up\r\n\r\nvar server = http.createServer(app).listen(app.get('port'), function(){\r\n  console.log(\"Express server listening on port \" + app.get('port'));\r\n});\r\n\r\nvar io = require('socket.io').listen(server);\r\n\r\nio.set('loglevel',10) // set log level to get all debug messages\r\n\r\nio.set(\"authorization\", passportSocketIo.authorize({\r\n  key: 'connect.sid', //the cookie where express (or connect) stores its session id.\r\n  secret: mySecret, //the session secret to parse the cookie\r\n  store:   mySessionStore, //the session store that express uses\r\n  fail: function(data, accept) { // *optional* callbacks on success or fail"],[0,"\r\n  "]],"start1":1629,"start2":1629,"length1":521,"length2":1579},{"diffs":[[0,"og('"],[-1,"positionSuccess"],[1,"fail"],[0,"');\r\n "],[-1,"\r\n"],[0,"   "],[-1," var lat = position.coords.latitude;\r\n    var lng = position.coords.longitude;\r\n    var acr = position.coords.accuracy;\r\n \r\n    // mark user's position\r\n    userMarker = L.marker([lat, lng], {\r\n      icon: redIcon\r\n    });\r\n \r\n    // uncomment for static debug\r\n    //userMarker = L.marker([30.2630, 262.254], { icon: redIcon });\r\n \r\n    // load leaflet map\r\n    map = L.map('map', {\r\n      center: [30.2630, 262.254],\r\n      zoom: 15,\r\n      zoomControl: false,\r\n      attributionControl: false\r\n    });\r\n \r\n    // leaflet API key tiler\r\n    L.tileLayer('http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', { maxZoom: 18, detectRetina: true }).addTo(map);\r\n    \r\n    userMarker.addTo(map);\r\n  }"],[1,"accept(null, false); // second param takes boolean on whether or not to allow handshake\r\n  },\r\n  success: function(data, accept) {\r\n    console.log('success');\r\n    accept(null, true);\r\n  }\r\n}));\r\n\r\n// Clients is a list of users who have connected\r\nvar clients = [];\r\nvar count = 0;\r\n///////////////////////////////////////////////////////////////////// SEND() UTILITY\r\nfunction send(message) {   \r\n  clients.forEach(function(client) {\r\n      client.send(message);\r\n  });\r\n}\r\n\r\nio.on('connection',function(socket){\r\n\r\n  count++;\r\n  clients.push(socket);\r\n\r\n  io.sockets.emit('count', {\r\n      number: count\r\n  });\r\n\r\n  socket.on('send:coords', function (data) {\r\n    socket.broadcast.emit('load:coords', data);\r\n  });\r\n  \r\n  //socket.emit('init',{msg:\"test\"})\r\n  // socket.on('init', function (data) {\r\n\r\n  //   // io.sockets.emit('pin', {\r\n  //   //     lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\r\n  //   //     lng: data.Za, \r\n  //   //     username: socket.handshake.user.username\r\n  //   // });\r\n\r\n  //   send(JSON.stringify({\r\n  //       type: 'pin',\r\n  //       lat: data.Ya, // center: new google.maps.LatLng(30.2630, 262.254),\r\n  //       lng: data.Za, \r\n  //       username: socket.handshake.user.username\r\n  //     })\r\n  //   );\r\n  // })\r\n\r\n  // console.log(\"user connected: \", socket.handshake.user.username);\r\n\r\n  //filter sockets by user...\r\n  // var userGender = socket.handshake.user.gender, \r\n  //     opposite = userGender === \"male\" ? \"female\" : \"male\";\r\n\r\n  // passportSocketIo.filterSocketsByUser(io, function (user) {\r\n  //   return user.gender === opposite;\r\n  // }).forEach(function(s){\r\n  //   s.send(\"a \" + userGender + \" has arrived!\");\r\n  // });\r\n\r\n  // io.sockets.emit('pin', {\r\n  //     lat: 30.2630, // center: new google.maps.LatLng(30.2630, 262.254),\r\n  //     lng: 262.254 \r\n  // });\r\n\r\n  socket.on('disconnect', function (client) {\r\n    var index = clients.indexOf(client);\r\n    clients.splice(index,1);\r\n    count--;\r\n    io.sockets.emit('count', {\r\n        number: count\r\n    });\r\n  });\r\n\r\n\r\n})"],[0,"\r\n\r\n"]],"start1":3219,"start2":3219,"length1":766,"length2":2075}]],"length":5294,"saved":false}

{"ts":1361334453408,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"$(function() {\n\n  // TODO POSSIBILITIES\n  // \n  // Add in new marker icons - based on nerdType\n  // Obviously add a nerdType to profile\n  // \n  // Kill listener after first set of data is passed in sendData.\n  // Change the timing of the listener based on $.now() - emit\n  // \n  // Show the distance from the party\n  //\n  // Push notification manually from Admin, or using a bot at certain time interval. \n  //\n  // Colder Hotter, server side switch for distance to the party.\n  // Use a distance() mehod on the client to send a command to the server that will broadcast back a NOTE based on how close you are. \n\n  // generate unique user id\n  var userId = Math.random().toString(16).substring(2,15);\n  var socket = io.connect('/');\n  var map;\n\n  var info = $('#infobox');\n  var doc = $(document);\n\n  // custom marker's icon styles\n  var tinyIcon = L.Icon.extend({\n    options: {\n      shadowUrl: '../vendor/leaflet/assets/marker-shadow.png',\n      iconSize: [25, 39],\n      iconAnchor:   [12, 36],\n      shadowSize: [41, 41],\n      shadowAnchor: [12, 38],\n      popupAnchor: [0, -30]\n    }\n  });\n\n  var redIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-red.png' });\n  var yellowIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-yellow.png' });\n\n  var sentData = {}\n  var connects = {};\n  console.log(connects)\n  var markers = {};\n  var active = false;\n\n  socket.on('count', function (data) {\n    $(\".count\").text(data.number);\n  });\n\n  socket.on('load:coords', function(data) {\n    console.log('load:coords')\n\n    // if the user is new\n    // set the marker if that instance with unique id is not present in connects object. \n    // unique id and coords were created on page load - not updated - just sending \n    // the same coords as the user moves the mouse\n    if (!(data.id in connects)) {\n      setMarker(data);\n    }\n\n    connects[data.id] = data;\n    connects[data.id].updated = $.now(); // shorthand for (new Date).getTime()    \n\n  });\n\n  // check whether browser supports geolocation api\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });\n  } else {\n    $('.map').text('Your browser is out of fashion, there\\'s no geolocation!');\n  }\n\n  function positionSuccess(position) {\n\n    console.log('positionSuccess');\n\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n    var acr = position.coords.accuracy;\n\n    // mark user's position\n    userMarker = L.marker([lat, lng], {\n      icon: redIcon\n    });\n\n    // uncomment for static debug\n    //userMarker = L.marker([30.2630, 262.254], { icon: redIcon });\n\n    // load leaflet map\n    map = L.map('map', {\n      center: [30.2630, 262.254],\n      zoom: 15,\n      zoomControl: false,\n      attributionControl: false\n    });\n\n    // leaflet API key tiler\n    L.tileLayer('http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', { maxZoom: 18, detectRetina: true }).addTo(map);\n    \n    // set map bounds\n    //map.fitWorld();\n    userMarker.addTo(map);\n    userMarker.bindPopup('<p>You are here! Your ID is ' + userId + '</p>').openPopup();\n\n    //map.fitWorld();\n\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA   \n\n    var markers = new L.MarkerClusterGroup();\n    \n    for (var i = 0; i < addressPoints.length; i++) {\n      console.log('add addressPoints')\n      var a = addressPoints[i];\n      var title = a[2];\n      var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n      marker.bindPopup(title);\n      markers.addLayer(marker);\n    }\n\n    map.addLayer(markers);\n\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA  \n\n\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER  \n\n    // // set up mousemove listener to broadcast sentData object to all other connected clients \n    // var emit = $.now();\n    // // send coords on when user is active\n    // doc.on('mousemove', function() {\n    //   active = true; \n\n    //   sentData = {\n    //     id: userId,\n    //     active: active,\n    //     coords: [{\n    //       lat: lat,\n    //       lng: lng,\n    //       acr: acr\n    //     }]\n    //   }\n\n    //   //console.log(\"now: \" + $.now());\n    //   //console.log(\"emit: \" + emit);\n\n    //   console.log($.now() - emit);\n\n    //   if ($.now() - emit > 10000) {\n    //     socket.emit('send:coords', sentData);\n    //     emit = $.now();\n    //   }\n    // });\n\n/////////////////////// MANUAL INITIAL DATA EMITTER \n\n      sentData = {\n        id: userId,\n        active: active,\n        coords: [{\n          lat: lat,\n          lng: lng,\n          acr: acr\n        }]\n      }\n\n    socket.emit('send:coords', sentData);\n\n/////////////////////// MANUAL INITIAL DATA EMITTER     \n\n  }\n\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER\n\n  doc.bind('mouseup mouseleave', function() {\n    active = false;\n  });\n\n  function updateMarker( marker, latitude, longitude, label ){\n\n    console.log('updating marker location')\n\n      sentData = {\n        id: userId,\n        active: active,\n        coords: [{\n          lat: latitude,\n          lng: longitude,\n          acr: label\n        }]\n      }\n    \n    var latlng = new L.LatLng(latitude, longitude);\n\n    userMarker.setLatLng(latlng);\n\n    socket.emit('send:coords', sentData);\n\n  }\n\n  var positionTimer = navigator.geolocation.watchPosition(\n    function(position){\n      console.log( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\n      //alert( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\n      updateMarker(\n        userMarker,\n        position.coords.latitude,\n        position.coords.longitude,\n        \"Updated / Accurate Position\"\n      );  \n    }\n  ); \n\n\n\n  ///// Marker Clusters\n\n  markers = new L.MarkerClusterGroup();\n\n  // showing markers for connections\n  function setMarker(data) {\n    console.log('setMarker');\n\n    console.log(data);\n\n    nerdsPoints = [];\n\n    var nerdsPoint = [];\n\n    nerdsPoint[0] = data.coords[0].lat;\n    nerdsPoint[1] = data.coords[0].lng;\n    nerdsPoint[2] = data.id;\n\n    nerdsPoints.push(nerdsPoint);\n\n    // for (i = 0; i < data.coords.length; i++) {\n    //   var marker = L.marker([data.coords[i].lat, data.coords[i].lng], { icon: yellowIcon }).addTo(map);\n    //   marker.bindPopup('<p>One more external user is here!</p>');\n\n      for (var i = 0; i < nerdsPoints.length; i++) {\n        var a = nerdsPoints[i];\n        var title = a[2];\n        var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n        marker.bindPopup(title);\n        markers.addLayer(marker);\n      }\n\n      map.addLayer(markers);\n      markers[data.id] = marker;\n\n    // var markers = new L.MarkerClusterGroup();\n    \n    // for (var i = 0; i < addressPoints.length; i++) {\n    //   var a = addressPoints[i];\n    //   var title = a[2];\n    //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n    //   marker.bindPopup(title);\n    //   markers.addLayer(marker);\n    // }\n\n    // map.addLayer(markers);\n\n    //}\n\n  }\n\n  // handle geolocation api errors\n  function positionError(error) {\n    var errors = {\n      1: 'Authorization fails', // permission denied\n      2: 'Can\\'t detect your location', //position unavailable\n      3: 'Connection timeout' // timeout\n    };\n    showError('Error:' + errors[error.code]);\n  }\n\n  function showError(msg) {\n    info.addClass('error').text(msg);\n\n    doc.click(function() { info.removeClass('error') });\n  }\n\n  // delete inactive users every 15 sec\n  // setInterval(function() {\n  //   for (ident in connects){\n  //     if ($.now() - connects[ident].updated > 15000) {\n  //       delete connects[ident];\n  //       map.removeLayer(markers[ident]);\n  //     }\n  //   }\n  // }, 15000);\n\n  // var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',\n  //   cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade, Points &copy 2012 LINZ',\n  //   cloudmade = new L.TileLayer(cloudmadeUrl, {maxZoom: 17, attribution: cloudmadeAttribution}),\n  //   latlng = new L.LatLng(-37.82, 175.24);\n\n  // var map = new L.Map('map', {center: latlng, zoom: 13, layers: [cloudmade]});\n\n  // var markers = new L.MarkerClusterGroup();\n  \n  // for (var i = 0; i < addressPoints.length; i++) {\n  //   var a = addressPoints[i];\n  //   var title = a[2];\n  //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n  //   marker.bindPopup(title);\n  //   markers.addLayer(marker);\n  // }\n\n  // map.addLayer(markers);\n\n});\n\n// $(document).ready(function () {\n\n//   var socket = io.connect();\n\n//   var map;\n\n//   function initialize() {\n//     var mapOptions = {\n//       zoom: 16,\n//       mapTypeId: google.maps.MapTypeId.ROADMAP\n//     };\n//     map = new google.maps.Map(document.getElementById('map_canvas'),\n//         mapOptions);\n\n//     // Try HTML5 geolocation\n//     if(navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(function(position) {\n//         var pos = new google.maps.LatLng(position.coords.latitude,\n//                                          position.coords.longitude);\n\n//         var infowindow = new google.maps.Marker({\n//           map: map,\n//           position: pos,\n//           content: 'me'\n//         });\n\n//         map.setCenter(pos);\n\n//         socket.emit('init', pos);\n//         socket.on('message', function (data) {\n\n//           console.log('message received')\n\n\n//           var json = JSON.parse(data);    \n\n//             if (json['type'] = \"pin\") {\n//               console.log('type: ' + json.type);\n//               console.log(\"TYPE PIN MESSAGE\");\n//               // fire an event\n//               //$.deck('go', json.state);\n\n//               console.log('create new pin:' + json.username)\n//               var latlng = new google.maps.LatLng(json.lat, json.lng);\n//               var markerz = new google.maps.Marker({\n//                 position: latlng, \n//                 map: map \n//                 //content: data.username\n//               });\n\n//             }\n            // if (json.cmd) {\n            //   console.log('cmd: ' + json.cmd);\n            //   console.log(\"CMD MESSAGE\");\n            //   // call deck.js api\n            //   $.deck(json.cmd)\n            // }\n            // else if (json.clients) {\n            //   console.log('clients: ' + json.clients);\n            //   console.log(\"CLIENT NUMBER MESSAGE\");   \n            //   // update the DOM\n            //   $('#viewers').text('viewers:' + json.clients);\n            // }\n            // else if (json.loc) {\n            //   console.log('loc: ' + json.loc);\n            //   console.log(\"CLIENT loc MESSAGE\");  \n            //   // update the DOM\n            //   $('#locations').append('location: ' + json.loc +'</br>');\n            // }\n            // else if (json.fn) {\n            //   console.log('callback fn: ' + json.fn);\n            //   console.log(\"FIRING SERVER DEFINED CALLBACK\");\n            //   json.fn();\n            // }\n\n\n  //       });\n\n  //     }, function() {\n  //       handleNoGeolocation(true);\n  //     });\n  //   } else {\n  //     // Browser doesn't support Geolocation\n  //     handleNoGeolocation(false);\n  //   }\n  // }\n\n  // function handleNoGeolocation(errorFlag) {\n  //   if (errorFlag) {\n  //     var content = 'Error: The Geolocation service failed.';\n  //   } else {\n  //     var content = 'Error: Your browser doesn\\'t support geolocation.';\n  //   }\n\n  //   var options = {\n  //     map: map,\n  //     position: new google.maps.LatLng(60, 105),\n  //     content: content\n  //   };\n\n  //   var infowindow = new google.maps.InfoWindow(options);\n  //   map.setCenter(options.position);\n  // }\n\n  // google.maps.event.addDomListener(window, 'load', initialize);\n\n\n  // socket.on('count', function (data) {\n  //   $(\".count\").text(data.number);\n  // });\n\n  // function updateMarker( marker, latitude, longitude, label ){\n  //   marker.setPosition(\n  //     new google.maps.LatLng(\n  //       latitude,\n  //       longitude\n  //     )\n  //   );\n   \n  //   if (label){        \n  //     marker.setTitle( label );\n  //   }\n  // }\n\n  // function success(position) {\n  //   latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n\n  //   socket.emit('init', latlng);\n\n  //   var myOptions = {\n  //     zoom: 15,\n  //     center: latlng,\n  //     mapTypeControl: false,\n  //     navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL},\n  //     mapTypeId: google.maps.MapTypeId.ROADMAP\n  //   };\n\n  //   map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\n\n  //   var circle = new google.maps.Circle({\n  //     map:map, radius:300\n  //   });\n\n  //   circle.bindTo('center', marker, 'position');\n  //   map.setCenter( new google.maps.LatLng(position.coords.latitude, position.coords.longitude));\n\n  //   var marker = new google.maps.Marker({\n  //     position: latlng, \n  //     map: map, \n  //     title:\"Html5 Hacks!\"\n  //   });\n\n  // }\n\n  // function error(msg) {\n  //   console.log(msg);\n  // }\n\n  // if (navigator.geolocation) {\n  //   navigator.geolocation.getCurrentPosition(success, error)\n  // } else {\n  //   error('not supported');\n  // }\n\n  // var positionTimer = navigator.geolocation.watchPosition(\n  //   function(position){\n  //     console.log( \"Newer Position Found\" );\n  //     updateMarker(\n  //       marker,\n  //       position.coords.latitude,\n  //       position.coords.longitude,\n  //       \"Updated / Accurate Position\"\n  //     );  \n  //   }\n  // );  \n  \n// });"]],"start1":0,"start2":0,"length1":0,"length2":13717}]],"length":13717}
{"contributors":[],"silentsave":false,"ts":1361336751397,"patch":[[{"diffs":[[0,"() {"],[-1,"\n\n  // TODO POSSIBILITIES\n  // \n  // Add in new marker icons - based on nerdType\n  // Obviously add a nerdType to profile\n  // \n  // Kill listener after first set of data is passed in sendData.\n  // Change the timing of the listener based on $.now() - emit\n  // \n  // Show the distance from the party\n  //\n  // Push notification manually from Admin, or using a bot at certain time interval. \n  //\n  // Colder Hotter, server side switch for distance to the party.\n  // Use a distance() mehod on the client to send a command to the server that will broadcast back a NOTE based on how close you are. \n\n  // generate unique user id\n  var userId = Math.random().toString(16).substring(2,15);\n  var socket = io.connect('/');\n  var map;\n\n  var info = $('#infobox');\n  var doc = $(document);\n\n  // custom marker's icon styles\n  var tinyIcon = L.Icon.extend({\n    options: {\n      shadowUrl: '../vendor/leaflet/assets/marker-shadow.png',\n      iconSize: [25, 39],\n      iconAnchor:   [12, 36],\n      shadowSize: [41, 41],\n      shadowAnchor: [12, 38],\n      popupAnchor: [0, -30]\n    }\n  });\n\n  var redIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-red.png' });\n  var yellowIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-yellow.png' });\n\n  var sentData = {}\n  var connects = {};\n  console.log(connects)\n  var markers = {};\n  var active = false;\n\n  socket.on('count', function (data) {\n    $(\".count\").text(data.number);\n  });\n\n  socket.on('load:coords', function(data) {\n    console.log('load:coords')\n\n    // if the user is new\n    // set the marker if that instance with unique id is not present in connects object. \n    // unique id and coords were created on page load - not updated - just sending \n    // the same coords as the user moves the mouse\n    if (!(data.id in connects)) {\n      setMarker(data);\n    }\n\n    connects[data.id] = data;\n    connects[data.id].updated = $.now(); // shorthand for (new Date).getTime()    \n\n  });\n\n  // check whether browser supports geolocation api\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });\n  } else {\n    $('.map').text('Your browser is out of fashion, there\\'s no geolocation!');\n  }\n\n  function positionSuccess(position) {\n\n    console.log('positionSuccess');\n\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n    var acr = position.coords.accuracy;\n\n    // mark user's position\n    userMarker = L.marker([lat, lng], {\n      icon: redIcon\n    });\n\n    // uncomment for static debug\n    //userMarker = L.marker([30.2630, 262.254], { icon: redIcon });\n\n    // load leaflet map\n    map = L.map('map', {\n      center: [30.2630, 262.254],\n      zoom: 15,\n      zoomControl: false,\n      attributionControl: false\n    });\n\n    // leaflet API key tiler\n    L.tileLayer('http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', { maxZoom: 18, detectRetina: true }).addTo(map);\n    \n    // set map bounds\n    //map.fitWorld();\n    userMarker.addTo(map);\n    userMarker.bindPopup('<p>You are here! Your ID is ' + userId + '</p>').openPopup();\n\n    //map.fitWorld();\n\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA   \n\n    var markers = new L.MarkerClusterGroup();\n    \n    for (var i = 0; i < addressPoints.length; i++) {\n      console.log('add addressPoints')\n      var a = addressPoints[i];\n      var title = a[2];\n      var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n      marker.bindPopup(title);\n      markers.addLayer(marker);\n    }\n\n    map.addLayer(markers);\n\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA  \n\n\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER  \n\n    // // set up mousemove listener to broadcast sentData object to all other connected clients \n    // var emit = $.now();\n    // // send coords on when user is active\n    // doc.on('mousemove', function() {\n    //   active = true; \n\n    //   sentData = {\n    //     id: userId,\n    //     active: active,\n    //     coords: [{\n    //       lat: lat,\n    //       lng: lng,\n    //       acr: acr\n    //     }]\n    //   }\n\n    //   //console.log(\"now: \" + $.now());\n    //   //console.log(\"emit: \" + emit);\n\n    //   console.log($.now() - emit);\n\n    //   if ($.now() - emit > 10000) {\n    //     socket.emit('send:coords', sentData);\n    //     emit = $.now();\n    //   }\n    // });\n\n/////////////////////// MANUAL INITIAL DATA EMITTER \n\n      sentData = {\n        id: userId,\n        active: active,\n        coords: [{\n          lat: lat,\n          lng: lng,\n          acr: acr\n        }]\n      }\n\n    socket.emit('send:coords', sentData);\n\n/////////////////////// MANUAL INITIAL DATA EMITTER     \n\n  }\n\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER\n\n  doc.bind('mouseup mouseleave', function() {\n    active = false;\n  });\n\n  function updateMarker( marker, latitude, longitude, label ){\n\n    console.log('updating marker location')\n\n      sentData = {\n        id: userId,\n        active: active,\n        coords: [{\n          lat: latitude,\n          lng: longitude,\n          acr: label\n        }]\n      }\n    \n    var latlng = new L.LatLng(latitude, longitude);\n\n    userMarker.setLatLng(latlng);\n\n    socket.emit('send:coords', sentData);\n\n  }\n\n  var positionTimer = navigator.geolocation.watchPosition(\n    function(position){\n      console.log( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\n      //alert( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\n      updateMarker(\n        userMarker,\n        position.coords.latitude,\n        position.coords.longitude,\n        \"Updated / Accurate Position\"\n      );  \n    }\n  ); \n\n\n\n  ///// Marker Clusters\n\n  markers = new L.MarkerClusterGroup();\n\n  // showing markers for connections\n  function setMarker(data) {\n    console.log('setMarker');\n\n    console.log(data);\n\n    nerdsPoints = [];\n\n    var nerdsPoint = [];\n\n    nerdsPoint[0] = data.coords[0].lat;\n    nerdsPoint[1] = data.coords[0].lng;\n    nerdsPoint[2] = data.id;\n\n    nerdsPoints.push(nerdsPoint);\n\n    // for (i = 0; i < data.coords.length; i++) {\n    //   var marker = L.marker([data.coords[i].lat, data.coords[i].lng], { icon: yellowIcon }).addTo(map);\n    //   marker.bindPopup('<p>One more external user is here!</p>');\n\n      for (var i = 0; i < nerdsPoints.length; i++) {\n        var a = nerdsPoints[i];\n        var title = a[2];\n        var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n        marker.bindPopup(title);\n        markers.addLayer(marker);\n      }\n\n      map.addLayer(markers);\n      markers[data.id] = marker;\n\n    // var markers = new L.MarkerClusterGroup();\n    \n    // for (var i = 0; i < addressPoints.length; i++) {\n    //   var a = addressPoints[i];\n    //   var title = a[2];\n    //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n    //   marker.bindPopup(title);\n    //   markers.addLayer(marker);\n    // }\n\n    // map.addLayer(markers);\n\n    //}\n\n  }\n\n  // handle geolocation api errors\n  function positionError(error) {\n    var errors = {\n      1: 'Authorization fails', // permission denied\n      2: 'Can\\'t detect your location', //position unavailable\n      3: 'Connection timeout' // timeout\n    };\n    showError('Error:' + errors[error.code]);\n  }\n\n  function showError(msg) {\n    info.addClass('error').text(msg);\n\n    doc.click(function() { info.removeClass('error') });\n  }\n\n  // delete inactive users every 15 sec\n  // setInterval(function() {\n  //   for (ident in connects){\n  //     if ($.now() - connects[ident].updated > 15000) {\n  //       delete connects[ident];\n  //       map.removeLayer(markers[ident]);\n  //     }\n  //   }\n  // }, 15000);\n\n  // var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',\n  //   cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade, Points &copy 2012 LINZ',\n  //   cloudmade = new L.TileLayer(cloudmadeUrl, {maxZoom: 17, attribution: cloudmadeAttribution}),\n  //   latlng = new L.LatLng(-37.82, 175.24);\n\n  // var map = new L.Map('map', {center: latlng, zoom: 13, layers: [cloudmade]});\n\n  // var markers = new L.MarkerClusterGroup();\n  \n  // for (var i = 0; i < addressPoints.length; i++) {\n  //   var a = addressPoints[i];\n  //   var title = a[2];\n  //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n  //   marker.bindPopup(title);\n  //   markers.addLayer(marker);\n  // }\n\n  // map.addLayer(markers);\n\n});\n\n// $(document).ready(function () {\n\n//   var socket = io.connect();\n\n//   var map;\n\n//   function initialize() {\n//     var mapOptions = {\n//       zoom: 16,\n//       mapTypeId: google.maps.MapTypeId.ROADMAP\n//     };\n//     map = new google.maps.Map(document.getElementById('map_canvas'),\n//         mapOptions);\n\n//     // Try HTML5 geolocation\n//     if(navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(function(position) {\n//         var pos = new google.maps.LatLng(position.coords.latitude,\n//                                          position.coords.longitude);\n\n//         var infowindow = new google.maps.Marker({\n//           map: map,\n//           position: pos,\n//           content: 'me'\n//         });\n\n//         map.setCenter(pos);\n\n//         socket.emit('init', pos);\n//         socket.on('message', function (data) {\n\n//           console.log('message received')\n\n\n//           var json = JSON.parse(data);    \n\n//             if (json['type'] = \"pin\") {\n//               console.log('type: ' + json.type);\n//               console.log(\"TYPE PIN MESSAGE\");\n//               // fire an event\n//               //$.deck('go', json.state);\n\n//               console.log('create new pin:' + json.username)\n//               var latlng = new google.maps.LatLng(json.lat, json.lng);\n//               var markerz = new google.maps.Marker({\n//                 position: latlng, \n//                 map: map \n//                 //content: data.username\n//               });\n\n//             }\n            // if (json.cmd) {\n            //   console.log('cmd: ' + json.cmd);\n            //   console.log(\"CMD MESSAGE\");\n            //   // call deck.js api\n            //   $.deck(json.cmd)\n            // }\n            // else if (json.clients) {\n            //   console.log('clients: ' + json.clients);\n            //   console.log(\"CLIENT NUMBER MESSAGE\");   \n            //   // update the DOM\n            //   $('#viewers').text('viewers:' + json.clients);\n            // }\n            // else if (json.loc) {\n            //   console.log('loc: ' + json.loc);\n            //   console.log(\"CLIENT loc MESSAGE\");  \n            //   // update the DOM\n            //   $('#locations').append('location: ' + json.loc +'</br>');\n            // }\n            // else if (json.fn) {\n            //   console.log('callback fn: ' + json.fn);\n            //   console.log(\"FIRING SERVER DEFINED CALLBACK\");\n            //   json.fn();\n            // }\n\n\n  //       });\n\n  //     }, function() {\n  //       handleNoGeolocation(true);\n  //     });\n  //   } else {\n  //     // Browser doesn't support Geolocation\n  //     handleNoGeolocation(false);\n  //   }\n  // }\n\n  // function handleNoGeolocation(errorFlag) {\n  //   if (errorFlag) {\n  //     var content = 'Error: The Geolocation service failed.';\n  //   } else {\n  //     var content = 'Error: Your browser doesn\\'t support geolocation.';\n  //   }\n\n  //   var options = {\n  //     map: map,\n  //     position: new google.maps.LatLng(60, 105),\n  //     content: content\n  //   };\n\n  //   var infowindow = new google.maps.InfoWindow(options);\n  //   map.setCenter(options.position);\n  // }\n\n  // google.maps.event.addDomListener(window, 'load', initialize);\n\n\n  // socket.on('count', function (data) {\n  //   $(\".count\").text(data.number);\n  // });\n\n  // function updateMarker( marker, latitude, longitude, label ){\n  //   marker.setPosition(\n  //     new google.maps.LatLng(\n  //       latitude,\n  //       longitude\n  //     )\n  //   );\n   \n  //   if (label){        \n  //     marker.setTitle( label );\n  //   }\n  // }\n\n  // function success(position) {\n  //   latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n\n  //   socket.emit('init', latlng);\n\n  //   var myOptions = {\n  //     zoom: 15,\n  //     center: latlng,\n  //     mapTypeControl: false,\n  //     navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL},\n  //     mapTypeId: google.maps.MapTypeId.ROADMAP\n  //   };\n\n  //   map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\n\n  //   var circle = new google.maps.Circle({\n  //     map:map, radius:300\n  //   });\n\n  //   circle.bindTo('center', marker, 'position');\n  //   map.setCenter( new google.maps.LatLng(position.coords.latitude, position.coords.longitude));\n\n  //   var marker = new google.maps.Marker({\n  //     position: latlng, \n  //     map: map, \n  //     title:\"Html5 Hacks!\"\n  //   });\n\n  // }\n\n  // function error(msg) {\n  //   console.log(msg);\n  // }\n\n  // if (navigator.geolocation) {\n  //   navigator.geolocation.getCurrentPosition(success, error)\n  // } else {\n  //   error('not supported');\n  // }\n\n  // var positionTimer = navigator.geolocation.watchPosition(\n  //   function(position){\n  //     console.log( \"Newer Position Found\" );\n  //     updateMarker(\n  //       marker,\n  //       position.coords.latitude,\n  //       position.coords.longitude,\n  //       \"Updated / Accurate Position\"\n  //     );  \n  //   }\n  // );  \n  \n// });"],[1,"\r\n \r\n  var map;\r\n  var info = $('#infobox');\r\n  var doc = $(document);\r\n \r\n  var tinyIcon = L.Icon.extend({\r\n    options: {\r\n      shadowUrl: '../vendor/leaflet/assets/marker-shadow.png',\r\n      iconSize: [25, 39],\r\n      iconAnchor:   [12, 36],\r\n      shadowSize: [41, 41],\r\n      shadowAnchor: [12, 38],\r\n      popupAnchor: [0, -30]\r\n    }\r\n  });\r\n \r\n  var redIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-red.png' });\r\n \r\n  var sentData = {}\r\n  var connects = {};\r\n  console.log(connects)\r\n  var markers = {};\r\n  var active = false;\r\n \r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });\r\n  } else {\r\n    $('.map').text('Your browser is out of fashion, there\\'s no geolocation!');\r\n  }\r\n \r\n  function positionSuccess(position) {\r\n \r\n    console.log('positionSuccess');\r\n \r\n    var lat = position.coords.latitude;\r\n    var lng = position.coords.longitude;\r\n    var acr = position.coords.accuracy;\r\n \r\n    // mark user's position\r\n    userMarker = L.marker([lat, lng], {\r\n      icon: redIcon\r\n    });\r\n \r\n    // uncomment for static debug\r\n    //userMarker = L.marker([30.2630, 262.254], { icon: redIcon });\r\n \r\n    // load leaflet map\r\n    map = L.map('map', {\r\n      center: [30.2630, 262.254],\r\n      zoom: 15,\r\n      zoomControl: false,\r\n      attributionControl: false\r\n    });\r\n \r\n    // leaflet API key tiler\r\n    L.tileLayer('http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', { maxZoom: 18, detectRetina: true }).addTo(map);\r\n    \r\n    userMarker.addTo(map);\r\n  }\r\n});\r\n"]],"start1":10,"start2":10,"length1":13707,"length2":1629}]],"length":1639,"saved":false}
{"ts":1361336897528,"patch":[[{"diffs":[[0,"tion"],[-1,"Error"],[1,"Success"],[0,", { "]],"start1":670,"start2":670,"length1":13,"length2":15}]],"length":1641,"saved":false}
{"ts":1361337062810,"patch":[[{"diffs":[[0,"nction() {\r\n"],[-1," "],[1,"\r\n  // TODO POSSIBILITIES\r\n  // \r\n  // Add in new marker icons - based on nerdType\r\n  // Obviously add a nerdType to profile\r\n  // \r\n  // Kill listener after first set of data is passed in sendData.\r\n  // Change the timing of the listener based on $.now() - emit\r\n  // \r\n  // Show the distance from the party\r\n  //\r\n  // Push notification manually from Admin, or using a bot at certain time interval. \r\n  //\r\n  // Colder Hotter, server side switch for distance to the party.\r\n  // Use a distance() mehod on the client to send a command to the server that will broadcast back a NOTE based on how close you are. \r\n\r\n  // generate unique user id\r\n  var userId = Math.random().toString(16).substring(2,15);\r\n  var socket = io.connect('/');"],[0,"\r\n  var map;"]],"start1":4,"start2":4,"length1":25,"length2":759},{"diffs":[[0,"r map;\r\n"],[1,"\r\n"],[0,"  var in"]],"start1":757,"start2":757,"length1":16,"length2":18},{"diffs":[[0,"document);\r\n"],[-1," "],[1,"\r\n  // custom marker's icon styles"],[0,"\r\n  var tiny"]],"start1":810,"start2":810,"length1":25,"length2":58},{"diffs":[[0,"  }\r\n  });\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n  var redI"]],"start1":1121,"start2":1121,"length1":25,"length2":24},{"diffs":[[0,".png' });\r\n "],[-1,""],[0,""],[1," var yellowIcon = new tinyIcon({ iconUrl: '../vendor/leaflet/assets/marker-yellow.png' });\r\n"],[0,"\r\n  var sent"]],"start1":1211,"start2":1211,"length1":24,"length2":116},{"diffs":[[0,"false;\r\n"],[-1," "],[1,"\r\n  socket.on('count', function (data) {\r\n    $(\".count\").text(data.number);\r\n  });\r\n\r\n  socket.on('load:coords', function(data) {\r\n    console.log('load:coords')\r\n\r\n    // if the user is new\r\n    // set the marker if that instance with unique id is not present in connects object. \r\n    // unique id and coords were created on page load - not updated - just sending \r\n    // the same coords as the user moves the mouse\r\n    if (!(data.id in connects)) {\r\n      setMarker(data);\r\n    }\r\n\r\n    connects[data.id] = data;\r\n    connects[data.id].updated = $.now(); // shorthand for (new Date).getTime()    \r\n\r\n  });\r\n\r\n  // check whether browser supports geolocation api"],[0,"\r\n  if ("]],"start1":1421,"start2":1421,"length1":17,"length2":682},{"diffs":[[0,"position"],[-1,"Success"],[1,"Error"],[0,", { enab"]],"start1":2191,"start2":2191,"length1":23,"length2":21},{"diffs":[[0,";\r\n  }\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n  func"]],"start1":2328,"start2":2328,"length1":17,"length2":16},{"diffs":[[0,"ion) {\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    co"]],"start1":2370,"start2":2370,"length1":17,"length2":16},{"diffs":[[0,"Success');\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    var la"]],"start1":2405,"start2":2405,"length1":25,"length2":24},{"diffs":[[0,"uracy;\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    //"]],"start1":2535,"start2":2535,"length1":17,"length2":16},{"diffs":[[0,"dIcon\r\n    });\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    // uncomme"]],"start1":2629,"start2":2629,"length1":33,"length2":32},{"diffs":[[0,"edIcon });\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    // loa"]],"start1":2739,"start2":2739,"length1":25,"length2":24},{"diffs":[[0,"   });\r\n"],[-1," "],[0,""],[1,""],[0,"\r\n    //"]],"start1":2917,"start2":2917,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"userMarker.addTo(map);\r\n  }\r\n});\r\n"],[1,"// set map bounds\r\n    //map.fitWorld();\r\n    userMarker.addTo(map);\r\n    userMarker.bindPopup('<p>You are here! Your ID is ' + userId + '</p>').openPopup();\r\n\r\n    //map.fitWorld();\r\n\r\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA   \r\n\r\n    var markers = new L.MarkerClusterGroup();\r\n    \r\n    for (var i = 0; i < addressPoints.length; i++) {\r\n      console.log('add addressPoints')\r\n      var a = addressPoints[i];\r\n      var title = a[2];\r\n      var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\r\n      marker.bindPopup(title);\r\n      markers.addLayer(marker);\r\n    }\r\n\r\n    map.addLayer(markers);\r\n\r\n/////////////////////////////////////////////// SOUTH AUSTIN DUMMY DATA  \r\n\r\n\r\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER  \r\n\r\n    // // set up mousemove listener to broadcast sentData object to all other connected clients \r\n    // var emit = $.now();\r\n    // // send coords on when user is active\r\n    // doc.on('mousemove', function() {\r\n    //   active = true; \r\n\r\n    //   sentData = {\r\n    //     id: userId,\r\n    //     active: active,\r\n    //     coords: [{\r\n    //       lat: lat,\r\n    //       lng: lng,\r\n    //       acr: acr\r\n    //     }]\r\n    //   }\r\n\r\n    //   //console.log(\"now: \" + $.now());\r\n    //   //console.log(\"emit: \" + emit);\r\n\r\n    //   console.log($.now() - emit);\r\n\r\n    //   if ($.now() - emit > 10000) {\r\n    //     socket.emit('send:coords', sentData);\r\n    //     emit = $.now();\r\n    //   }\r\n    // });\r\n\r\n/////////////////////// MANUAL INITIAL DATA EMITTER \r\n\r\n      sentData = {\r\n        id: userId,\r\n        active: active,\r\n        coords: [{\r\n          lat: lat,\r\n          lng: lng,\r\n          acr: acr\r\n        }]\r\n      }\r\n\r\n    socket.emit('send:coords', sentData);\r\n\r\n/////////////////////// MANUAL INITIAL DATA EMITTER     \r\n\r\n  }\r\n\r\n/////////////////////////////////////////////// MOUSE EVENTS EMITTER\r\n\r\n  doc.bind('mouseup mouseleave', function() {\r\n    active = false;\r\n  });\r\n\r\n  function updateMarker( marker, latitude, longitude, label ){\r\n\r\n    console.log('updating marker location')\r\n\r\n      sentData = {\r\n        id: userId,\r\n        active: active,\r\n        coords: [{\r\n          lat: latitude,\r\n          lng: longitude,\r\n          acr: label\r\n        }]\r\n      }\r\n    \r\n    var latlng = new L.LatLng(latitude, longitude);\r\n\r\n    userMarker.setLatLng(latlng);\r\n\r\n    socket.emit('send:coords', sentData);\r\n\r\n  }\r\n\r\n  var positionTimer = navigator.geolocation.watchPosition(\r\n    function(position){\r\n      console.log( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\r\n      //alert( \"Newer Position Found: \" + position.coords.latitude + \", \" + position.coords.longitude);\r\n      updateMarker(\r\n        userMarker,\r\n        position.coords.latitude,\r\n        position.coords.longitude,\r\n        \"Updated / Accurate Position\"\r\n      );  \r\n    }\r\n  ); \r\n\r\n\r\n\r\n  ///// Marker Clusters\r\n\r\n  markers = new L.MarkerClusterGroup();\r\n\r\n  // showing markers for connections\r\n  function setMarker(data) {\r\n    console.log('setMarker');\r\n\r\n    console.log(data);\r\n\r\n    nerdsPoints = [];\r\n\r\n    var nerdsPoint = [];\r\n\r\n    nerdsPoint[0] = data.coords[0].lat;\r\n    nerdsPoint[1] = data.coords[0].lng;\r\n    nerdsPoint[2] = data.id;\r\n\r\n    nerdsPoints.push(nerdsPoint);\r\n\r\n    // for (i = 0; i < data.coords.length; i++) {\r\n    //   var marker = L.marker([data.coords[i].lat, data.coords[i].lng], { icon: yellowIcon }).addTo(map);\r\n    //   marker.bindPopup('<p>One more external user is here!</p>');\r\n\r\n      for (var i = 0; i < nerdsPoints.length; i++) {\r\n        var a = nerdsPoints[i];\r\n        var title = a[2];\r\n        var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\r\n        marker.bindPopup(title);\r\n        markers.addLayer(marker);\r\n      }\r\n\r\n      map.addLayer(markers);\r\n      markers[data.id] = marker;\r\n\r\n    // var markers = new L.MarkerClusterGroup();\r\n    \r\n    // for (var i = 0; i < addressPoints.length; i++) {\r\n    //   var a = addressPoints[i];\r\n    //   var title = a[2];\r\n    //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\r\n    //   marker.bindPopup(title);\r\n    //   markers.addLayer(marker);\r\n    // }\r\n\r\n    // map.addLayer(markers);\r\n\r\n    //}\r\n\r\n  }\r\n\r\n  // handle geolocation api errors\r\n  function positionError(error) {\r\n    var errors = {\r\n      1: 'Authorization fails', // permission denied\r\n      2: 'Can\\'t detect your location', //position unavailable\r\n      3: 'Connection timeout' // timeout\r\n    };\r\n    showError('Error:' + errors[error.code]);\r\n  }\r\n\r\n  function showError(msg) {\r\n    info.addClass('error').text(msg);\r\n\r\n    doc.click(function() { info.removeClass('error') });\r\n  }\r\n\r\n  // delete inactive users every 15 sec\r\n  // setInterval(function() {\r\n  //   for (ident in connects){\r\n  //     if ($.now() - connects[ident].updated > 15000) {\r\n  //       delete connects[ident];\r\n  //       map.removeLayer(markers[ident]);\r\n  //     }\r\n  //   }\r\n  // }, 15000);\r\n\r\n  // var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',\r\n  //   cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade, Points &copy 2012 LINZ',\r\n  //   cloudmade = new L.TileLayer(cloudmadeUrl, {maxZoom: 17, attribution: cloudmadeAttribution}),\r\n  //   latlng = new L.LatLng(-37.82, 175.24);\r\n\r\n  // var map = new L.Map('map', {center: latlng, zoom: 13, layers: [cloudmade]});\r\n\r\n  // var markers = new L.MarkerClusterGroup();\r\n  \r\n  // for (var i = 0; i < addressPoints.length; i++) {\r\n  //   var a = addressPoints[i];\r\n  //   var title = a[2];\r\n  //   var marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\r\n  //   marker.bindPopup(title);\r\n  //   markers.addLayer(marker);\r\n  // }\r\n\r\n  // map.addLayer(markers);\r\n\r\n});\r\n\r\n// $(document).ready(function () {\r\n\r\n//   var socket = io.connect();\r\n\r\n//   var map;\r\n\r\n//   function initialize() {\r\n//     var mapOptions = {\r\n//       zoom: 16,\r\n//       mapTypeId: google.maps.MapTypeId.ROADMAP\r\n//     };\r\n//     map = new google.maps.Map(document.getElementById('map_canvas'),\r\n//         mapOptions);\r\n\r\n//     // Try HTML5 geolocation\r\n//     if(navigator.geolocation) {\r\n//       navigator.geolocation.getCurrentPosition(function(position) {\r\n//         var pos = new google.maps.LatLng(position.coords.latitude,\r\n//                                          position.coords.longitude);\r\n\r\n//         var infowindow = new google.maps.Marker({\r\n//           map: map,\r\n//           position: pos,\r\n//           content: 'me'\r\n//         });\r\n\r\n//         map.setCenter(pos);\r\n\r\n//         socket.emit('init', pos);\r\n//         socket.on('message', function (data) {\r\n\r\n//           console.log('message received')\r\n\r\n\r\n//           var json = JSON.parse(data);    \r\n\r\n//             if (json['type'] = \"pin\") {\r\n//               console.log('type: ' + json.type);\r\n//               console.log(\"TYPE PIN MESSAGE\");\r\n//               // fire an event\r\n//               //$.deck('go', json.state);\r\n\r\n//               console.log('create new pin:' + json.username)\r\n//               var latlng = new google.maps.LatLng(json.lat, json.lng);\r\n//               var markerz = new google.maps.Marker({\r\n//                 position: latlng, \r\n//                 map: map \r\n//                 //content: data.username\r\n//               });\r\n\r\n//             }\r\n            // if (json.cmd) {\r\n            //   console.log('cmd: ' + json.cmd);\r\n            //   console.log(\"CMD MESSAGE\");\r\n            //   // call deck.js api\r\n            //   $.deck(json.cmd)\r\n            // }\r\n            // else if (json.clients) {\r\n            //   console.log('clients: ' + json.clients);\r\n            //   console.log(\"CLIENT NUMBER MESSAGE\");   \r\n            //   // update the DOM\r\n            //   $('#viewers').text('viewers:' + json.clients);\r\n            // }\r\n            // else if (json.loc) {\r\n            //   console.log('loc: ' + json.loc);\r\n            //   console.log(\"CLIENT loc MESSAGE\");  \r\n            //   // update the DOM\r\n            //   $('#locations').append('location: ' + json.loc +'</br>');\r\n            // }\r\n            // else if (json.fn) {\r\n            //   console.log('callback fn: ' + json.fn);\r\n            //   console.log(\"FIRING SERVER DEFINED CALLBACK\");\r\n            //   json.fn();\r\n            // }\r\n\r\n\r\n  //       });\r\n\r\n  //     }, function() {\r\n  //       handleNoGeolocation(true);\r\n  //     });\r\n  //   } else {\r\n  //     // Browser doesn't support Geolocation\r\n  //     handleNoGeolocation(false);\r\n  //   }\r\n  // }\r\n\r\n  // function handleNoGeolocation(errorFlag) {\r\n  //   if (errorFlag) {\r\n  //     var content = 'Error: The Geolocation service failed.';\r\n  //   } else {\r\n  //     var content = 'Error: Your browser doesn\\'t support geolocation.';\r\n  //   }\r\n\r\n  //   var options = {\r\n  //     map: map,\r\n  //     position: new google.maps.LatLng(60, 105),\r\n  //     content: content\r\n  //   };\r\n\r\n  //   var infowindow = new google.maps.InfoWindow(options);\r\n  //   map.setCenter(options.position);\r\n  // }\r\n\r\n  // google.maps.event.addDomListener(window, 'load', initialize);\r\n\r\n\r\n  // socket.on('count', function (data) {\r\n  //   $(\".count\").text(data.number);\r\n  // });\r\n\r\n  // function updateMarker( marker, latitude, longitude, label ){\r\n  //   marker.setPosition(\r\n  //     new google.maps.LatLng(\r\n  //       latitude,\r\n  //       longitude\r\n  //     )\r\n  //   );\r\n   \r\n  //   if (label){        \r\n  //     marker.setTitle( label );\r\n  //   }\r\n  // }\r\n\r\n  // function success(position) {\r\n  //   latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\r\n\r\n  //   socket.emit('init', latlng);\r\n\r\n  //   var myOptions = {\r\n  //     zoom: 15,\r\n  //     center: latlng,\r\n  //     mapTypeControl: false,\r\n  //     navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL},\r\n  //     mapTypeId: google.maps.MapTypeId.ROADMAP\r\n  //   };\r\n\r\n  //   map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\r\n\r\n  //   var circle = new google.maps.Circle({\r\n  //     map:map, radius:300\r\n  //   });\r\n\r\n  //   circle.bindTo('center', marker, 'position');\r\n  //   map.setCenter( new google.maps.LatLng(position.coords.latitude, position.coords.longitude));\r\n\r\n  //   var marker = new google.maps.Marker({\r\n  //     position: latlng, \r\n  //     map: map, \r\n  //     title:\"Html5 Hacks!\"\r\n  //   });\r\n\r\n  // }\r\n\r\n  // function error(msg) {\r\n  //   console.log(msg);\r\n  // }\r\n\r\n  // if (navigator.geolocation) {\r\n  //   navigator.geolocation.getCurrentPosition(success, error)\r\n  // } else {\r\n  //   error('not supported');\r\n  // }\r\n\r\n  // var positionTimer = navigator.geolocation.watchPosition(\r\n  //   function(position){\r\n  //     console.log( \"Newer Position Found\" );\r\n  //     updateMarker(\r\n  //       marker,\r\n  //       position.coords.latitude,\r\n  //       position.coords.longitude,\r\n  //       \"Updated / Accurate Position\"\r\n  //     );  \r\n  //   }\r\n  // );  \r\n  \r\n// });"]],"start1":3119,"start2":3119,"length1":38,"length2":11087}]],"length":14206,"saved":false}
{"ts":1361337239103,"patch":[[{"diffs":[[0,"TTER\r\n\r\n"],[1,"//"],[0,"  doc.bi"]],"start1":5042,"start2":5042,"length1":16,"length2":18},{"diffs":[[0,"on() {\r\n"],[-1," "],[1,"//"],[0,"   activ"]],"start1":5091,"start2":5091,"length1":17,"length2":18},{"diffs":[[0,"false;\r\n"],[1,"//"],[0,"  });\r\n\r"]],"start1":5113,"start2":5113,"length1":16,"length2":18}]],"length":14211,"saved":false}
{"ts":1361337305193,"patch":[[{"diffs":[[0,"TTER\r\n\r\n"],[-1,"//"],[0,"  doc.bi"]],"start1":5042,"start2":5042,"length1":18,"length2":16},{"diffs":[[0,"on() {\r\n"],[-1,"//"],[1," "],[0,"   activ"]],"start1":5089,"start2":5089,"length1":18,"length2":17},{"diffs":[[0,"false;\r\n"],[-1,"//"],[0,"  });\r\n\r"]],"start1":5110,"start2":5110,"length1":18,"length2":16}]],"length":14206,"saved":false}
{"ts":1361337380735,"patch":[[{"diffs":[[0," }\r\n\r\n      "],[1,"//"],[0,"map.addLayer"]],"start1":6955,"start2":6955,"length1":24,"length2":26},{"diffs":[[0,"markers);\r\n     "],[1,"//"],[0," markers[data.id"]],"start1":6982,"start2":6982,"length1":32,"length2":34}]],"length":14210,"saved":false}
{"ts":1361337457548,"patch":[[{"diffs":[[0," }\r\n\r\n      "],[-1,"//"],[0,"map.addLayer"]],"start1":6955,"start2":6955,"length1":26,"length2":24},{"diffs":[[0,"ers);\r\n     "],[-1,"//"],[0," markers[dat"]],"start1":6984,"start2":6984,"length1":26,"length2":24}]],"length":14206,"saved":false}
{"ts":1361337507823,"patch":[[{"diffs":[[0," false;\r\n\r\n "],[1,"/*"],[0," socket.on('"]],"start1":1420,"start2":1420,"length1":24,"length2":26},{"diffs":[[0,"   \r\n\r\n  });"],[1," */"],[0,"\r\n\r\n  // che"]],"start1":2030,"start2":2030,"length1":24,"length2":27}]],"length":14211,"saved":false}
{"ts":1361337548443,"patch":[[{"diffs":[[0,"\n\r\n "],[-1,"/*"],[0," soc"]],"start1":1428,"start2":1428,"length1":10,"length2":8},{"diffs":[[0," });"],[-1," */"],[0,"\r\n\r\n"]],"start1":2036,"start2":2036,"length1":11,"length2":8}]],"length":14206,"saved":false}
{"ts":1361337574678,"patch":[[{"diffs":[[0,"position"],[-1,"Error"],[1,"Success"],[0,", { enab"]],"start1":2191,"start2":2191,"length1":21,"length2":23}]],"length":14208,"saved":false}
{"ts":1361337627946,"patch":[[{"diffs":[[0,"position"],[-1,"Success"],[1,"Error"],[0,", { enab"]],"start1":2191,"start2":2191,"length1":23,"length2":21}]],"length":14206,"saved":false}
{"ts":1361337803195,"patch":[[{"diffs":[[0,"o(map);\r\n   "],[1,"//"],[0," userMarker."]],"start1":3184,"start2":3184,"length1":24,"length2":26}]],"length":14208,"saved":false}
{"ts":1361337864681,"patch":[[{"diffs":[[0,"p);\r\n   "],[-1,"//"],[0," userMar"]],"start1":3188,"start2":3188,"length1":18,"length2":16},{"diffs":[[0,"dPopup('"],[-1,"<p>"],[0,"You are "]],"start1":3211,"start2":3211,"length1":19,"length2":16},{"diffs":[[0,"erId + '"],[-1,"</p>"],[0,"').openP"]],"start1":3250,"start2":3250,"length1":20,"length2":16}]],"length":14199,"saved":false}
{"ts":1361337877910,"patch":[[{"diffs":[[0,"erId"],[-1," + ''"],[0,").op"]],"start1":3250,"start2":3250,"length1":13,"length2":8}]],"length":14194,"saved":false}
{"ts":1361337917742,"patch":[[{"diffs":[[0,"dPopup('"],[1,"<p>"],[0,"You are "]],"start1":3211,"start2":3211,"length1":16,"length2":19},{"diffs":[[0,"+ userId"],[1," + '</p>'"],[0,").openPo"]],"start1":3249,"start2":3249,"length1":16,"length2":25}]],"length":14206,"saved":false}
{"ts":1361337936434,"patch":[[{"diffs":[[0,"ddTo(map);\r\n    "],[1,"//"],[0,"userMarker.bindP"]],"start1":3181,"start2":3181,"length1":32,"length2":34}]],"length":14208,"saved":false}

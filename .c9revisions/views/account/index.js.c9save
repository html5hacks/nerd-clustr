{"ts":1360818578174,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"exports.init = function(req, res){\n    if (req.isAuthenticated()) {\n        res.locals.user = req.user;\n        res.locals.isAuthenticated = true;\n        res.locals.isActive = req.user.isActive;\n        if(typeof req.user.github !== \"undefined\"){\n            res.locals.github = req.user.github;    \n        }\n        else{\n           res.locals.github = false; \n        }\n        if(typeof req.user.twitter !== \"undefined\"){\n            res.locals.twitter = req.user.twitter;    \n        }\n        else{\n           res.locals.twitter = false; \n        }        \n        res.app.db.models.User.findOne({\n            _id: req.user.id\n        }, function(err, user) {\n            if (err) {\n                res.send(500, 'Model findOne error. ' + err);\n                return;\n            }\n\n            if (req.header('x-requested-with') == 'XMLHttpRequest') {\n                console.log('the user for bb-fetch: ' + JSON.stringify(user));\n                //res.send(user);\n                res.send({\n                    data: {\n                        record: JSON.stringify(user)\n                    }\n                });\n            }\n            else {\n                console.log('the user for render: ' + JSON.stringify(user));\n                //TODO: send user without the pwd hashes\n                res.render('account/index', {\n                    data: {\n                        record: JSON.stringify(user)\n                    }\n                });\n            }\n        });\n\n\n    }\n    else {\n        res.redirect('/login');\n    }\n};\n\n\nexports.updateaccount = function(req, res){\n  //create a workflow event emitter\n  var workflow = new req.app.utility.Workflow(req, res);\n  \n  workflow.on('validate', function() {\n    if (!req.body.username) {\n      workflow.outcome.errfor.username = 'username is required';\n    }\n    else if (!/^[a-zA-Z0-9\\-\\_]+$/.test(req.body.username)) {\n      workflow.outcome.errfor.username = 'only use letters, numbers, \\'-\\', \\'_\\'';\n    }\n    if (!req.body.email) {\n      workflow.outcome.errfor.email = 'email is required';\n    }\n    else if (!/^[a-zA-Z0-9\\-\\_\\.\\+]+@[a-zA-Z0-9\\-\\_\\.]+\\.[a-zA-Z0-9\\-\\_]+$/.test(req.body.email)) {\n      workflow.outcome.errfor.email = 'provided email not in recognized format';\n    }\n    if (!req.body.password) workflow.outcome.errfor.password = 'password is required';\n    if (!req.body.confirm) workflow.outcome.errfor.confirm = 'confirm your password';\n    if (req.body.password != req.body.confirm) {\n      workflow.outcome.errors.push('Passwords do not match.');\n    }\n    //return if we have errors already\n    if (Object.keys(workflow.outcome.errfor).length != 0) return workflow.emit('response');\n    \n    workflow.emit('duplicateUsernameCheck');\n  });\n  \n  workflow.on('duplicateUsernameCheck', function() {//user.id should come from server\n    res.app.db.models.User.findOne({ username: req.body.username, _id: {$ne: req.user.id} }, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (user) {\n        workflow.outcome.errfor.username = 'username already taken';\n        return workflow.emit('response');\n      }\n      \n      workflow.emit('duplicateEmailCheck');\n    });\n  });\n  \n  workflow.on('duplicateEmailCheck', function() {//user.id should come from server\n    res.app.db.models.User.findOne({ email: req.body.email, _id: {$ne: req.user.id} }, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (user) {\n        workflow.outcome.errfor.email = 'email already registered';\n        return workflow.emit('response');\n      }\n      \n      workflow.emit('confirmPwdCheck');\n    });\n  });\n \n   workflow.on('confirmPwdCheck', function() {\n    if (req.body.password != req.body.confirm) {\n      workflow.outcome.errfor.confirm = 'Passwords do not match.';\n      return workflow.emit('response');\n    }\n      // check for duplicate email\n      workflow.emit('completeUser');    \n\n  });\n  \n  workflow.on('completeUser', function() {\n\n    //TODO: check in dbs if user is active vs accepting this data from client\n    var fieldsToSet = {\n      isActive: 'yes',\n      username: req.body.username,\n      email: req.body.email,\n      password: req.app.db.models.User.encryptPassword(req.body.password)\n    };\n    req.app.db.models.User.findByIdAndUpdate(req.user.id, fieldsToSet, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (req.user.isActive == \"yes\"){\n         workflow.emit('response'); \n      }\n      else {\n         workflow.outcome.user = user;\n         workflow.emit('createAccount');  \n      }\n      \n    });\n  });\n \n  workflow.on('createAccount', function() {\n    res.app.db.models.Account.create({ user: workflow.outcome.user._id}, function(err, account) {\n      if (err) return workflow.emit('exception', err);\n      \n      //update user with account\n      workflow.outcome.user.roles.account = account._id;\n      workflow.outcome.user.save(function(err, user) {\n        if (err) return workflow.emit('exception', err);\n        delete workflow.outcome.user;\n        //workflow.emit('logUserIn');\n        workflow.emit('sendCompletedSetupEmail');\n      });\n    });\n  });\n  \n  //TODO change reference to project name\n  workflow.on('sendCompletedSetupEmail', function() {\n    res.app.utility.email(req, res, {\n      from: req.app.get('email-from-name') +' <'+ req.app.get('email-from-address') +'>',\n      to: req.body.email,\n      subject: 'Your '+ req.app.get('project-name') +' Account',\n      textPath: 'signup/email-text',\n      htmlPath: 'signup/email-html',\n      locals: {\n        username: req.body.username,\n        email: req.body.email,\n        loginURL: 'http://'+ req.headers.host +'/login/',\n        projectName: req.app.get('project-name')\n      },\n      success: function(message) {\n        \n        workflow.emit('logUserIn');\n      },\n      error: function(err) {\n        workflow.outcome.errors.push('Error Sending Welcome Email: '+ err);\n        workflow.emit('response');\n      }\n    });\n    \n    workflow.emit('logUserIn');\n  });\n  \n  workflow.on('logUserIn', function() {\n    req._passport.instance.authenticate('local', function(err, user, info) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (!user) {\n        workflow.outcome.errors.push('Login failed. That is strange.');\n        return workflow.emit('response');\n      }\n      else {\n        req.login(user, function(err) {\n          if (err) return workflow.emit('exception', err);\n          \n          workflow.outcome.defaultReturnUrl = user.defaultReturnUrl();\n          workflow.outcome.user = user;\n          workflow.outcome.record = user;\n          \n          workflow.emit('response');\n          \n        });\n      }\n    })(req, res);\n  });\n  \n  //start the workflow\n  workflow.emit('validate');\n};\n\nexports.update = function(req, res, next){\n  //create a workflow event emitter\n  var workflow = new req.app.utility.Workflow(req, res);\n  \n  workflow.on('validate', function() {\n    //defaults\n    if (!req.body.isActive) req.body.isActive = 'no';\n    \n    //verify\n    if (!req.body.username) {\n      workflow.outcome.errfor.username = 'required';\n    }\n    else if (!/^[a-zA-Z0-9\\-\\_]+$/.test(req.body.username)) {\n      workflow.outcome.errfor.username = 'only use letters, numbers, \\'-\\', \\'_\\'';\n    }\n\n    if (!req.body.email) {\n      workflow.outcome.errfor.email = 'required';\n    }\n    else if (!/^[a-zA-Z0-9\\-\\_\\.\\+]+@[a-zA-Z0-9\\-\\_\\.]+\\.[a-zA-Z0-9\\-\\_]+$/.test(req.body.email)) {\n      workflow.outcome.errfor.email = 'invalid email format';\n    }\n    \n    //return if we have errors already\n    if (Object.keys(workflow.outcome.errfor).length != 0) return workflow.emit('response');\n    \n    workflow.emit('duplicateUsernameCheck');\n  });\n  //TODO: use server side user-id vs _id provided from client for security reasons\n  workflow.on('duplicateUsernameCheck', function() {\n    res.app.db.models.User.findOne({ username: req.body.username, _id: {$ne: req.body._id} }, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (user) {\n        workflow.outcome.errfor.username = 'username already taken';\n        return workflow.emit('response');\n      }\n      \n      workflow.emit('duplicateEmailCheck');\n    });\n  });\n  \n  workflow.on('duplicateEmailCheck', function() {\n      //TODO: use server side user-id vs _id provided from client for security reasons\n    res.app.db.models.User.findOne({ email: req.body.email, _id: {$ne: req.body._id} }, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (user) {\n        workflow.outcome.errfor.email = 'email already taken';\n        return workflow.emit('response');\n      }\n      \n      workflow.emit('patchUser');\n    });\n  });\n  \n  workflow.on('patchUser', function() {\n    var fieldsToSet = {\n      isActive: req.body.isActive,\n      username: req.body.username,\n      email: req.body.email\n    };\n    \n    req.app.db.models.User.findByIdAndUpdate(req.body._id, fieldsToSet, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      return workflow.emit('response');\n    });\n  });\n  \n  //start the workflow\n  workflow.emit('validate');\n};\n\n\n\nexports.password = function(req, res, next){\n  //create a workflow event emitter\n  var workflow = new req.app.utility.Workflow(req, res);\n  \n  workflow.on('validate', function() {\n    if (!req.body.newPassword) workflow.outcome.errfor.newPassword = 'required';\n    if (!req.body.confirm) workflow.outcome.errfor.confirm = 'required';\n    if (req.body.newPassword != req.body.confirm) {\n      workflow.outcome.errors.push('Passwords do not match.');\n    }\n    \n    //return if we have errors already\n    if (Object.keys(workflow.outcome.errfor).length != 0 || workflow.outcome.errors.length != 0) {\n      return workflow.emit('response');\n    }\n    \n    workflow.emit('patchUser');\n  });\n  \n  workflow.on('patchUser', function() {\n    var fieldsToSet = {\n      password: req.app.db.models.User.encryptPassword(req.body.newPassword)\n    };\n    //TODO: use server side user-id vs _id provided from client for security reasons\n    req.app.db.models.User.findByIdAndUpdate(req.body._id, fieldsToSet, function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      workflow.outcome.newPassword = '';\n      workflow.outcome.confirm = '';\n      return workflow.emit('response');\n    });\n  });\n  \n  //start the workflow\n  workflow.emit('validate');\n};\n\nexports.unlinkProvider = function(req, res, next){\n  //create a workflow event emitter\n  var workflow = new req.app.utility.Workflow(req, res);\n  \n \n  workflow.on('patchUser', function() {\n    res.app.db.models.User.findOne({ _id: req.params.id }).exec(function(err, user) {\n      if (err) return workflow.emit('exception', err);\n      \n      if (!user) {\n        workflow.outcome.errors.push('User was not found.');\n        return workflow.emit('response');\n      }\n      console.log(\"User-ID: \" + req.params.id);\n      console.log(\"Provider: \" + req.params.provider);\n      console.log(\"User: \" + JSON.stringify(user[req.params.provider]));\n      if(req.params.provider ==\"twitter\"){\n        user.twitter = undefined;  \n      }\n      else if(req.params.provider ==\"github\"){\n        user.github = undefined;  \n      }\n        else {\n            // unrecognized authentication provider\n        }\n      user.save(function(err, user) {\n        if (err) return workflow.emit('exception', err);\n        workflow.outcome.user = JSON.stringify(user)\n        \n        workflow.emit('response');\n      });\n    });\n  });\n\n  //start the workflow\n  workflow.emit('patchUser');\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":11671}]],"length":11671}
